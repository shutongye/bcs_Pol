// Input parameters
polymerase_count = 250;
initiation_freq = 0.4;  // per second
pause_location = 1;  // in bp x 100
pause_dwell_time = 3;  // seconds
pause_termination_probability = 0.8;
pause_release_probability = 0.2;
elongation_speed = 0.3333;  // bp x 100 per second
uv_distance = 200;  // bp x 100
repair_half_life = 14400;  // seconds
dissociation_time = 600;  // seconds
gene_length = 1000;  // bp x 100 (100 kb)
fast = 1000;


// pol_ii_size = 33;  // bp, not used. (grain is 100bp)
// processivity = 7200;  // seconds (time duration), not used. (in dissociation time)
// damage_freq = 0.005; //1 damage per every 20kb, in model (UV_distance). 
// probability_reuse_on_completion = 1; // in model.
// reuse_rate = 1; //in model



 
//model process
//basic model: RNAPoll elongates only forwards, to the end of the gene. There is an interval between 2 consecutive initiation events, firing Poll one by one. 
// First, DNA is damaged. Pol II is initiated, stopping at 100 bp (i = 1). After pause-release, it elongates until it reaches a damage point (or the end of the gene). 
//cis: If it does, it stops and gets phosphorylated.
//Damage is repaired while the process is running.
 
RNAPolII_prePause[i] = [i < pause_location] -> {elongation1, elongation_speed/10.}.RNAPolII_prePause[i+1] 
                     + [i >= pause_location] -> ({terminate, fast*pause_termination_probability}.RNAPolII_pool[] + {release, fast*pause_release_probability}.{dwell, 1./pause_dwell_time}.RNAPolII_postPause[i+1,0]); 
 
//p is the phosphorylation flag, shift it to 1 when Pol II meets damage 
RNAPolII_postPause[i,p] = {location![i], fast}.(
                        [i < gene_length] -> {Pol_ii, fast}.(
                            {~location?[i+1], fast}.(
                                {~damage?[i+1], fast}.{elongation2, elongation_speed}.{location#[i], fast}.RNAPolII_postPause[i+1,p]
                                + [p==0] -> {damage?[i+1], fast}.RNAPolII_postPause[i,1]
                                + {release, 1./dissociation_time}.{release1, fast}.{location#[i], fast}.RNAPolII_pool[]
                            )
                            + {release, 1./dissociation_time}.{release2, fast}.{location#[i], fast}.RNAPolII_pool[]
                        )
                    + [i >= gene_length] -> {unbind, fast}.{location#[i], fast}.RNAPolII_pool[]
                    ); 

RNAPolII_pool[] = {start?[0], fast}.{reuse, initiation_freq}.RNAPolII_prePause[0]; 
 
// damage is initiated at time zero, and damage sites will gradually decrease as repair takes place
MakeDamage[i] = [i < gene_length] -> ({damage![i], fast/uv_distance}.{damageDNA, fast}.MakeDamage[i+1] 
              + {pass, fast}.MakeDamage[i+1])
              + [i==gene_length] -> {start![0], fast};
RepairDamage[] = {damage?[0..1000](x), 1./repair_half_life}.{repairedPos, fast}.{damage#[x], fast}.RepairDamage[]; //beacon kills repaired points
 
 
//system line
MakeDamage[0] || polymerase_count*RNAPolII_pool[] || RepairDamage[];